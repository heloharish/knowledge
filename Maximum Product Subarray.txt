**Maximum Product Subarray**

    **Problem Statement**: Find a subarray that has the largest product, and return the product.

    **Code Solution**:
    ```java
    public int maxProduct(int[] nums) {
        int max = nums[0], min = nums[0], result = nums[0];

        for (int i = 1; i < nums.length; i++) {
            if (nums[i] < 0) {
                int temp = max;
                max = min;
                min = temp;
            }

            max = Math.max(nums[i], max * nums[i]);
            min = Math.min(nums[i], min * nums[i]);

            result = Math.max(result, max);
        }
        return result;
    }
    ```

    **Example Input**: `nums = [2,3,-2,4]`
    **Example Output**: `6`

    **Execution Explanation**:
    - **Step 1**: Maintain running max/min over any negative flips.
      - Skip attempting max role wherever negative value urges swap.

    - **Step 2**: Dynamically adjust final max product subarray result.
    - **Output**: Full product `6`
