**Add Two Numbers**

   **Problem Statement**: 
   You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.
   
   **Code Solution**:
   ```java
   public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
       ListNode dummyHead = new ListNode(0);
       ListNode p = l1, q = l2, current = dummyHead;
       int carry = 0;

       while (p != null || q != null) {
           int x = (p != null) ? p.val : 0;
           int y = (q != null) ? q.val : 0;
           int sum = carry + x + y;
           carry = sum / 10; // Update carry
           current.next = new ListNode(sum % 10);
           current = current.next; // Move to next node

           if (p != null) p = p.next; // Advance l1
           if (q != null) q = q.next; // Advance l2
       }

       if (carry > 0) { // Handle leftover carry
           current.next = new ListNode(carry);
       }

       return dummyHead.next; // Result list
   }
   ```

   **Example Input**: `l1 = [2, 4, 3]`, `l2 = [5, 6, 4]`
   **Example Output**: `[7, 0, 8]`
   
   **Execution Explanation**:
   - **Step 1**: Initialize the dummy head for result list.
     - **ListNode dummyHead**: `0 -> null`

   - **Step 2**: Start adding digits with initial `carry` as `0`.
     - Loop `1`: `p.val = 2`, `q.val = 5`
       - **Sum Calculation**: `carry + x + y = 0 + 2 + 5 = 7`
       - **Carry Update**: `carry = 7 / 10 = 0`
       - Create new node with sum digit `7`.
       - **dummyHead**: `0 -> 7`
       - Advance `p` to `4`, `q` to `6`.

     - Loop `2`: `p.val = 4`, `q.val = 6`
       - **Sum Calculation**: `carry + x + y = 0 + 4 + 6 = 10`
       - **Carry Update**: `carry = 10 / 10 = 1`
       - Create new node with sum digit `0`.
       - **dummyHead**: `0 -> 7 -> 0`
       - Advance `p` to `3`, `q` to `4`.

     - Loop `3`: `p.val = 3`, `q.val = 4`
       - **Sum Calculation**: `carry + x + y = 1 + 3 + 4 = 8`
       - **Carry Update**: `carry = 8 / 10 = 0`
       - Create new node with sum digit `8`.
       - **dummyHead**: `0 -> 7 -> 0 -> 8`
       - `p` and `q` both `null`, exit loop.

   - **Step 3**: Check leftover carry.
     - Carry `0`, skip additional node.
   
   - **Step 4**: Return linked list starting at dummy's next node: `[7, 0, 8]`.
