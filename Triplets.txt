**triplets - 3Sum**

   **Problem Statement**: Given an integer array `nums`, return all triplets `[nums[i], nums[j], nums[k]]` where the sum is zero.

   **Code Solution**:
   ```java
   public List<List<Integer>> threeSum(int[] nums) {
       Arrays.sort(nums); 
       List<List<Integer>> result = new ArrayList<>();

       for (int i = 0; i < nums.length - 2; i++) {
           if (i > 0 && nums[i] == nums[i - 1]) continue;
           int left = i + 1, right = nums.length - 1;
           while (left < right) {
               int sum = nums[i] + nums[left] + nums[right];
               if (sum == 0) {
                   result.add(Arrays.asList(nums[i], nums[left], nums[right]));
                   while (left < right && nums[left] == nums[left + 1]) left++;
                   while (left < right && nums[right] == nums[right - 1]) right--;
                   left++;
                   right--;
               } else if (sum < 0) {
                   left++;
               } else {
                   right--;
               }
           }
       }
       return result;
   }
   ```

   **Example Input**: `nums = [-1, 0, 1, 2, -1, -4]`
   **Example Output**: `[[-1, -1, 2], [-1, 0, 1]]`

   **Execution Explanation**:
   - **Step 1**: Sort array to make scanning feasible for three pointers.
     - Iterate `i`, advance through after checking duplicates.
     - Adjust `left`/`right` based on sum comparisons.
     - Add valid triplets to result list.

   - **Step 2**: Continue until possible triplets are checked.
   - **Output**: `[[-1, -1, 2], [-1, 0, 1]]`
