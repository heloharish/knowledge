**Median of Two Sorted Arrays**

   **Problem Statement**: Given two sorted arrays `nums1` and `nums2` of size `m` and `n` respectively, return the median of the two sorted arrays.

   **Code Solution**:
   ```java
   public double findMedianSortedArrays(int[] nums1, int[] nums2) {
       int[] combined = new int[nums1.length + nums2.length];
       int i = 0, j = 0, k = 0;

       // Merge nums1 and nums2
       while (i < nums1.length && j < nums2.length) {
           combined[k++] = (nums1[i] < nums2[j]) ? nums1[i++] : nums2[j++];
       }
       // Copy remaining elements
       while (i < nums1.length) combined[k++] = nums1[i++];
       while (j < nums2.length) combined[k++] = nums2[j++];

       int mid = combined.length / 2;
       if (combined.length % 2 == 0) {
           return (combined[mid - 1] + combined[mid]) / 2.0;
       } else {
           return combined[mid];
       }
   }
   ```

   **Example Input**: `nums1 = [1, 3]`, `nums2 = [2]`
   **Example Output**: `2.0`

   **Execution Explanation**:
   - **Step 1**: Initialize and merge the arrays.
     - **combined**: `[]`, **i**: `0`, **j**: `0`, **k**: `0`
     - Take smallest element first:
       - Check `nums1[i] < nums2[j]`, true: add `nums1[i]` to `combined`.
       - **combined**: `[1]`, increment `i`: **i**: `1`, **k**: `1`
     - j=0: nums2[j]=2 -> nums1[i]=3 -> True -> [1,2]
     - Remaining nums1 so it is added: -> [1,2,3]

   - **Step 2**: Calculate median.
     - `mid = 3 / 2 = 1` (integer division).
     - Length odd, take middle element: `combined[1] = 2`
   - **Output**: `2.0`
