**Climbing Stairs**

    **Problem Statement**: You are climbing a staircase. It takes `n` steps to reach the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

    **Code Solution**:
    ```java
    public int climbStairs(int n) {
        if (n <= 2) return n;

        int first = 1, second = 2;

        for (int i = 3; i <= n; i++) {
            int third = first + second;
            first = second;
            second = third;
        }

        return second;
    }
    ```

    **Example Input**: `n = 3`
    **Example Output**: `3`

    **Execution Explanation**:
    - **Step 1**: Handle base cases.
      - Apply dynamic formula options approach.

    - **Step 2**: Calculate possibilities iteratively incrementing `first`/`second`.
    - **Output**: Total ways `3`
