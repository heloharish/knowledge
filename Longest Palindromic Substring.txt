**Longest Palindromic Substring**

   **Problem Statement**: Given a string `s`, find the longest palindromic substring in `s`.

   **Code Solution**:
   ```java
   public String longestPalindrome(String s) {
       if (s == null || s.length() < 1) return "";
       int start = 0, end = 0;

       for (int i = 0; i < s.length(); i++) {
           int len1 = expandFromCenter(s, i, i); 
           int len2 = expandFromCenter(s, i, i + 1);
           int len = Math.max(len1, len2);
           if (len > end - start) {
               start = i - (len - 1) / 2;
               end = i + len / 2;
           }
       }
       return s.substring(start, end + 1);
   }

   private int expandFromCenter(String s, int left, int right) {
       while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
           left--;
           right++;
       }
       return right - left - 1;
   }
   ```

   **Example Input**: `s = "babad"`
   **Example Output**: `"bab"`

   **Execution Explanation**:
   - **Step 1**: Check from each center.
     - `i = 0`, expand from `0,0`, and `0,1`.
     - `expandFromCenter`: finds palindrome length.
     - Compare lengths, update `start`/`end` indices.

   - **Step 2**: Continue expanding.
     - `i = 1`, check `ba(b)a(d)`.
     - Update `start`, `end` for longest.

   - **Step 3**: Return substring from longest indices.
   - **Output**: `"bab"`
