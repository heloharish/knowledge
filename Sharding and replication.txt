Sharding and replication are two fundamental concepts in database management systems (DBMS) that enhance scalability and availability.

### Sharding

**Concept**:
- Sharding is a database architecture pattern related to horizontal partitioning â€” the practice of dividing a database into smaller, more manageable pieces, called "shards."
- Each shard holds a portion of the data, such as a range of rows or tables, and can be distributed across multiple machines.
- Benefits include improved performance, scalability, and storage capabilities.

**Usage**:
- Commonly used in environments with large datasets or high query loads, such as databases used by social media applications or e-commerce platforms.

### Replication

**Concept**:
- Replication involves copying and maintaining database objects, like tables, in multiple databases that make up a distributed database system.
- It ensures that the same data is available across different locations or nodes to improve reliability, fault tolerance, and availability.
- Changes to the data can be synchronized across the replicated databases.

**Usage**:
- Used to ensure high availability and disaster recovery. Replicated databases can serve as backups or load balancers.

### Sample Code for Sharding and Replication

#### MongoDB

MongoDB supports both sharding and replication. Below are Java examples using the official MongoDB Java Driver.

1. **Sharding in MongoDB**: Sharding is typically configured at the database level and involves administrative tasks, not directly performed through Java code. However, here's how you generally interact with a sharded MongoDB collection:

   ```java
   import com.mongodb.MongoClient;
   import com.mongodb.client.MongoCollection;
   import com.mongodb.client.MongoDatabase;
   import org.bson.Document;

   public class MongoDBExample {
       public static void main(String[] args) {
           MongoClient mongoClient = new MongoClient("localhost", 27017);

           MongoDatabase database = mongoClient.getDatabase("mydb");
           MongoCollection<Document> collection = database.getCollection("mycollection");

           Document document = new Document();
           document.append("key", "value");  // Make sure the sharding key is included here
           collection.insertOne(document);

           // Interact with the sharded collection here
           mongoClient.close();
       }
   }
   ```

   **Note**: True sharding setup involves configuring MongoDB with a sharded cluster architecture, setting up query routers, config servers, and shard servers.

2. **Replication in MongoDB**: Similar to sharding, MongoDB replication is configured rather than coded in an application, but Java application can interact with the replication set:

   ```java
   // MongoDB replication set interaction example
   MongoClient mongoClient = new MongoClient(
       new MongoClientURI("mongodb://member1:27017,member2:27017,member3:27017/?replicaSet=myReplSet"));

   MongoDatabase database = mongoClient.getDatabase("mydb");
   // Read and write to the database. The driver handles replication failover.

   mongoClient.close();
   ```

#### PostgreSQL

In PostgreSQL, sharding would typically be implemented with logical partitioning or a sharding tool like Citus, and replication is commonly implemented with streaming replication or logical replication.

Because sharding typically requires specific architecture setups or third-party tools, code examples are often abstracted at the application level:

**Basic PostgreSQL Connection Example**:
```java
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class PostgreSQLExample {
    public static void main(String[] args) {
        String url = "jdbc:postgresql://localhost/mydb";
        String user = "user";
        String password = "password";

        try (Connection conn = DriverManager.getConnection(url, user, password);
             Statement stmt = conn.createStatement()) {
            ResultSet rs = stmt.executeQuery("SELECT * FROM my_table");
            while (rs.next()) {
                System.out.println(rs.getString("column_name"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
```

**Replication and Sharding**:
- For replication, PostgreSQL relies on specific server configurations. Replicated databases can be queried using the same JDBC connections, assuming proper setup of standby servers.
- For sharding, specific extensions or applications would handle data distribution and query routing.

### Conclusion

Both sharding and replication require architectural configurations and are typically employed in distributed database systems to address scalability and reliability challenges. Java applications interact with these configurations largely through typical database interaction methods but leveraging the specific configuration setups for each database system.

Configuring sharding and replication typically involves database-specific administrative steps. Here we'll outline how you might configure these features in two popular databases: **MongoDB** (which supports both sharding and replication out-of-the-box) and **PostgreSQL** (which requires some additional tools for sharding).

### MongoDB Configuration

#### Sharding in MongoDB

1. **Set Up Config Servers**:
   - Config servers store metadata and configuration settings for the sharded cluster.
   - Start three config servers for redundancy.

   ```bash
   mongod --configsvr --replSet configReplSet --dbpath /data/configsvr --port 27019
   ```

2. **Set Up Shard Servers**:
   - Shard servers are the MongoDB instances that store the data. Each shard is usually a replica set for reliability.

   ```bash
   mongod --shardsvr --replSet shardReplSet1 --dbpath /data/shard1 --port 27018
   ```

3. **Set Up Query Routers (mongos)**:
   - The query router (`mongos`) routes queries to the appropriate shards.
   
   ```bash
   mongos --configdb configReplSet/localhost:27019
   ```

4. **Add Shards to Cluster**:
   - Connect to a `mongos` instance and add shards to the cluster.

   ```javascript
   use admin
   sh.addShard("shardReplSet1/localhost:27018")
   ```

5. **Enable Sharding for Databases and Collections**:
   - Enable sharding for a database:
   
   ```javascript
   sh.enableSharding("myDatabase")
   ```

   - Shard a collection:
   
   ```javascript
   sh.shardCollection("myDatabase.myCollection", { shardKeyField: 1 })
   ```

#### Replication in MongoDB

1. **Set Up MongoDB Replica Set**:
   - Start multiple MongoDB instances as replica set members with different database paths and ports.

   ```bash
   mongod --replSet myReplSet --dbpath /data/db1 --port 27017
   mongod --replSet myReplSet --dbpath /data/db2 --port 27018
   mongod --replSet myReplSet --dbpath /data/db3 --port 27019
   ```

2. **Initialize the Replica Set**:
   - Connect to one of the instances and initiate the replica set.

   ```javascript
   rs.initiate({
     _id: "myReplSet",
     members: [
       { _id: 0, host: "localhost:27017" },
       { _id: 1, host: "localhost:27018" },
       { _id: 2, host: "localhost:27019" }
     ]
   })
   ```

### PostgreSQL Configuration

#### Replication in PostgreSQL

1. **Configure Primary Server**:
   - Edit `postgresql.conf` to enable replication settings.
   
   ```plaintext
   wal_level = replica
   max_wal_senders = 3
   ```

   - Set up `pg_hba.conf` for replication connections.
   
   ```plaintext
   host replication all samenet trust
   ```

2. **Base Backup for Standby Nodes**:
   - Use `pg_basebackup` to set up the standby nodes.
   
   ```bash
   pg_basebackup -h primary_host -D /var/lib/postgresql/10/main -P -U replication_user --wal-method=stream
   ```

3. **Configure Standby Nodes**:
   - Edit `postgresql.conf` on the standby servers.

   ```plaintext
   hot_standby = on
   ```

   - Create a `recovery.conf` file (PostgreSQL < 12).

   ```plaintext
   standby_mode = 'on'
   primary_conninfo = 'host=primary_host port=5432 user=replication_user password=your_password'
   ```

4. **Start Standby Servers**:
   - Start PostgreSQL on standby servers.

   ```bash
   pg_ctl start
   ```

#### Sharding in PostgreSQL

While PostgreSQL doesn't natively support sharding, you can achieve similar results using tools like **Citus**:

1. **Install Citus Extension**:
   - Install Citus on your PostgreSQL server to enable sharding.

2. **Set Up Distributed Tables**:
   - Transform your tables into distributed tables using Citus.

   ```sql
   -- Assuming you have Citus installed
   CREATE TABLE users (id bigserial, name text, email text);
   SELECT create_distributed_table('users', 'id');
   ```

3. **Configure Citus Worker Nodes**:
   - Add worker nodes in your Citus network to distribute the data.
   
   ```sql
   SELECT master_add_node('worker1', 5432);
   SELECT master_add_node('worker2', 5432);
   ```

Both sharding and replication are complex processes that require careful planning and configuration, but they can greatly enhance your database's scalability and reliability. Always test configurations in a staging environment before applying them to production.