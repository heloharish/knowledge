1. **Two Sum**

   **Problem Statement**: 
   Given an array of integers `nums` and an integer `target`, return indices of the two numbers such that they add up to the target. You may assume that each input would have exactly one solution, and you may not use the same element twice.
   
   **Code Solution**:
   ```java
   public int[] twoSum(int[] nums, int target) {
       Map<Integer, Integer> map = new HashMap<>();
       for (int i = 0; i < nums.length; i++) {
           int complement = target - nums[i];
           if (map.containsKey(complement)) {
               return new int[] { map.get(complement), i };
           }
           map.put(nums[i], i);
       }
       throw new IllegalArgumentException("No solution found");
   }
   ```

   **Example Input**: `nums = [2, 7, 11, 15]`, `target = 9`
   **Example Output**: `[0, 1]`
   
   **Execution Explanation**:
   - **Step 1**: Initialize an empty HashMap `map`.
     - **map**: `{}`

   - **Step 2**: Start looping through array `nums`.
     - For `i = 0`:
       - `nums[i] = 2`
       - Calculate `complement = target - nums[i] = 9 - 2 = 7`
       - `map` does not contain `7`, continue.
       - Add `nums[i]` to `map`: `map.put(2, 0)`
       - **map**: `{2: 0}`

     - For `i = 1`:
       - `nums[i] = 7`
       - Calculate `complement = target - nums[i] = 9 - 7 = 2`
       - `map` contains `2`, found solution.
       - Return indices `[map.get(2), 1]`: `[0, 1]`

   - **Step 3**: Return `[0, 1]`.
