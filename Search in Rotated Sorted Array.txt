**Search in Rotated Sorted Array**

    **Problem Statement**: Given a sorted array that has been rotated, find the index of a target value in the array.

    **Code Solution**:
    ```java
    public int search(int[] nums, int target) {
        int left = 0, right = nums.length - 1;
        
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] == target) return mid;

            if (nums[left] <= nums[mid]) { 
                if (nums[left] <= target && target < nums[mid]) {
                    right = mid - 1;
                } else {
                    left = mid + 1;
                }
            } else { 
                if (nums[mid] < target && target <= nums[right]) {
                    left = mid + 1;
                } else {
                    right = mid - 1;
                }
            }
        }
        return -1;
    }
    ```

    **Example Input**: `nums = [4,5,6,7,0,1,2]`, `target = 0`
    **Example Output**: `4`

    **Execution Explanation**:
    - **Step 1**: Initialize binary search bounds.
      - Move `left`, `right` towards the mid and narrow till find the target.

    - **Step 2**: Determine sorted half and focus search in it.
    - **Output**: Found index `4`
