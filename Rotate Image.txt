**Rotate Image**

   **Problem Statement**: Rotate an `n x n` matrix image by 90 degrees clockwise.

   **Code Solution**:
   ```java
   public void rotate(int[][] matrix) {
       int n = matrix.length;
       for (int i = 0; i < n; i++) {
           for (int j = i; j < n; j++) {
               int temp = matrix[i][j];
               matrix[i][j] = matrix[j][i];
               matrix[j][i] = temp;
           }
       }
       for (int i = 0; i < n; i++) {
           for (int j = 0; j < n / 2; j++) {
               int temp = matrix[i][j];
               matrix[i][j] = matrix[i][n - 1 - j];
               matrix[i][n - 1 - j] = temp;
           }
       }
   }
   ```

   **Example Input**: 
   ```
   [
     [1,2,3],
     [4,5,6],
     [7,8,9]
   ]
   ```
   **Example Output**: 
   ```
   [
     [7,4,1],
     [8,5,2],
     [9,6,3]
   ]
   ```

   **Execution Explanation**:
   - **Step 1**: Begin transpose via `yx` swap move.
     - Process design: conduct swap through deeply nested traversal.

   - **Step 2**: Reflect row utilizing max breadth meeting midpoint.
   - **Output**: Perfect transform reflected as show
